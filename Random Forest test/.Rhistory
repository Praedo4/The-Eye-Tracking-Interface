y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
feature_ids <- (3:6)
#print(text_features[3:6])
#result <- rfcv(text_features[,feature_ids], text_features$interest, cv.fold = 10)
#with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
comprehension.model <- randomForest(formula = comprehension ~ . - complexity - interest - familiarity - text.ID - person.ID, data = text_features[train_ids,], importance = TRUE,
ntree = 30000, mtry = 2)
comprehension.response <- predict(comprehension.model, text_features[test_ids,])
comprehension.correct <- (abs(comprehension.response - text_features[test_ids,]$comprehension) <= 1.0)
print(mean(comprehension.correct))
plot(comprehension.model)
varImpPlot(comprehension.model)
require(emov)
require(xlsx)
require(rJava)
require(randomForest)
#demo(fivesec, package="emov")
#print(fivesec$time)
#print(fivesec$x)
#print(fivesec$y)
#
##fivesec$x = filter(fivesec$x, rep(1/3, 3))
##fivesec$y = filter(fivesec$y, rep(1/3, 3))
#
#fixations = emov.idt(fivesec$time, fivesec$x, fivesec$y, 2, 20)
#
#print(fixations)
t = (0:99)
x = (0.0:99.0)
y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
feature_ids <- (3:6)
#print(text_features[3:6])
#result <- rfcv(text_features[,feature_ids], text_features$interest, cv.fold = 10)
#with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
interest.model <- randomForest(formula = interest ~ . - complexity - comprehension - familiarity - text.ID - person.ID, data = text_features[train_ids,], importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(comprehension.correct))
plot(comprehension.model)
varImpPlot(comprehension.model)
comprehension.model <- randomForest(formula = comprehension ~ . - complexity - interest - familiarity - text.ID - person.ID, data = text_features[train_ids,], importance = TRUE,
ntree = 3000, mtry = 2)
comprehension.response <- predict(comprehension.model, text_features[test_ids,])
comprehension.correct <- (abs(comprehension.response - text_features[test_ids,]$comprehension) <= 1.0)
print(mean(comprehension.correct))
plot(comprehension.model)
varImpPlot(comprehension.model)
require(emov)
require(xlsx)
require(rJava)
require(randomForest)
#demo(fivesec, package="emov")
#print(fivesec$time)
#print(fivesec$x)
#print(fivesec$y)
#
##fivesec$x = filter(fivesec$x, rep(1/3, 3))
##fivesec$y = filter(fivesec$y, rep(1/3, 3))
#
#fixations = emov.idt(fivesec$time, fivesec$x, fivesec$y, 2, 20)
#
#print(fixations)
t = (0:99)
x = (0.0:99.0)
y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
feature_ids <- (3:6)
#print(text_features[3:6])
#result <- rfcv(text_features[,feature_ids], text_features$interest, cv.fold = 10)
#with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
interest.model <- randomForest(formula = interest ~ . - complexity - comprehension - familiarity - text.ID - person.ID, data = text_features[train_ids,], importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
comprehension.model <- randomForest(formula = comprehension ~ . - complexity - interest - familiarity - text.ID - person.ID, data = text_features[train_ids,], importance = TRUE,
ntree = 3000, mtry = 2)
comprehension.response <- predict(comprehension.model, text_features[test_ids,])
comprehension.correct <- (abs(comprehension.response - text_features[test_ids,]$comprehension) <= 1.0)
print(mean(comprehension.correct))
plot(comprehension.model)
varImpPlot(comprehension.model)
require(emov)
require(xlsx)
require(rJava)
require(randomForest)
#demo(fivesec, package="emov")
#print(fivesec$time)
#print(fivesec$x)
#print(fivesec$y)
#
##fivesec$x = filter(fivesec$x, rep(1/3, 3))
##fivesec$y = filter(fivesec$y, rep(1/3, 3))
#
#fixations = emov.idt(fivesec$time, fivesec$x, fivesec$y, 2, 20)
#
#print(fixations)
t = (0:99)
x = (0.0:99.0)
y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings_2.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
feature_ids <- (3:6)
text_features$interest
require(emov)
require(xlsx)
require(rJava)
require(randomForest)
#demo(fivesec, package="emov")
#print(fivesec$time)
#print(fivesec$x)
#print(fivesec$y)
#
##fivesec$x = filter(fivesec$x, rep(1/3, 3))
##fivesec$y = filter(fivesec$y, rep(1/3, 3))
#
#fixations = emov.idt(fivesec$time, fivesec$x, fivesec$y, 2, 20)
#
#print(fixations)
t = (0:99)
x = (0.0:99.0)
y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings_2.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
feature_ids <- (3:6)
#print(text_features[3:6])
#result <- rfcv(text_features[,feature_ids], text_features$interest, cv.fold = 10)
#with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
interest.model <- randomForest(formula = interest ~ . - complexity - comprehension - familiarity - text.ID - person.ID, data = text_features[train_ids,], importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
require(emov)
require(xlsx)
require(rJava)
require(randomForest)
#demo(fivesec, package="emov")
#print(fivesec$time)
#print(fivesec$x)
#print(fivesec$y)
#
##fivesec$x = filter(fivesec$x, rep(1/3, 3))
##fivesec$y = filter(fivesec$y, rep(1/3, 3))
#
#fixations = emov.idt(fivesec$time, fivesec$x, fivesec$y, 2, 20)
#
#print(fixations)
t = (0:99)
x = (0.0:99.0)
y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings_2.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
feature_ids <- (3:6)
print(factor(text_features$interest))
require(emov)
require(xlsx)
require(rJava)
require(randomForest)
#demo(fivesec, package="emov")
#print(fivesec$time)
#print(fivesec$x)
#print(fivesec$y)
#
##fivesec$x = filter(fivesec$x, rep(1/3, 3))
##fivesec$y = filter(fivesec$y, rep(1/3, 3))
#
#fixations = emov.idt(fivesec$time, fivesec$x, fivesec$y, 2, 20)
#
#print(fixations)
t = (0:99)
x = (0.0:99.0)
y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings_2.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
feature_ids <- (3:6)
#print(text_features[3:6])
#result <- rfcv(text_features[,feature_ids], text_features$interest, cv.fold = 10)
#with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
interest.model <- randomForest(formula = - complexity - comprehension - familiarity - text.ID - person.ID, data = text_features[train_ids,], y = factor(text_features$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
interest.model <- randomForest(formula = . - complexity - comprehension - familiarity - text.ID - person.ID, data = text_features[train_ids,], y = factor(text_features$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
interest.model <- randomForest(formula = ~ . - complexity - comprehension - familiarity - text.ID - person.ID, data = text_features[train_ids,], y = factor(text_features$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
interest.model <- randomForest(formula = ~ . - complexity - comprehension - familiarity - text.ID - person.ID, data = text_features[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
interest.model <- randomForest(formula = ~ . - interest - complexity - comprehension - familiarity - text.ID - person.ID, data = text_features[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
interest.model <- randomForest(data = feature_parameters[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
nterest.model <- randomForest(x = feature_parameters[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
interest.model <- randomForest(x = feature_parameters[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
interest.model <- randomForest(x = feature_parameters[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 1)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
#with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
interest.model <- randomForest(x = feature_parameters[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
require(emov)
require(xlsx)
require(rJava)
require(randomForest)
#demo(fivesec, package="emov")
#print(fivesec$time)
#print(fivesec$x)
#print(fivesec$y)
#
##fivesec$x = filter(fivesec$x, rep(1/3, 3))
##fivesec$y = filter(fivesec$y, rep(1/3, 3))
#
#fixations = emov.idt(fivesec$time, fivesec$x, fivesec$y, 2, 20)
#
#print(fixations)
t = (0:99)
x = (0.0:99.0)
y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings_2.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
feature_ids <- (3:6)
#print(text_features[3:6])
#result <- rfcv(text_features[,feature_ids], text_features$interest, cv.fold = 10)
#with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
interest.model <- randomForest(x = feature_parameters[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
require(emov)
require(xlsx)
require(rJava)
require(randomForest)
#demo(fivesec, package="emov")
#print(fivesec$time)
#print(fivesec$x)
#print(fivesec$y)
#
##fivesec$x = filter(fivesec$x, rep(1/3, 3))
##fivesec$y = filter(fivesec$y, rep(1/3, 3))
#
#fixations = emov.idt(fivesec$time, fivesec$x, fivesec$y, 2, 20)
#
#print(fixations)
t = (0:99)
x = (0.0:99.0)
y = (0.0:99.0)
#print(t)
#print(x)
#print(y)
fixations = emov.idt(t, x, y, 3, 1)
print(fixations)
participant_ratings <- data.frame()
participant_ratings <- read.xlsx("participant_ratings_2.xlsx", sheetName="user ratings")
participant_ratings <- participant_ratings[,0:6] #Drop not-used columns
feature_parameters <- data.frame()
#feature_parameters <- read.xlsx("feature_parameters.xlsx", sheetName="user ratings")
#feature_parameters <- feature_parameters[,0:6] #Drop not-used columns
feature_parameters <- read.xlsx("measures.xlsx", sheetName="measures")
feature_parameters <- feature_parameters[,0:26] #Drop not-used columns
#print(feature_parameters)
text_features <- data.frame()
text_features <- merge(feature_parameters, participant_ratings, by=c("person.ID","text.ID"))
N <- nrow(text_features)
trainN <- floor((9*N)/10)
train_ids <- (1 : trainN)
test_ids <- (trainN + 1 : (N - trainN))
#feature_ids <- (3:6)
#print(text_features[3:6])
#result <- rfcv(text_features[,feature_ids], text_features$interest, cv.fold = 10)
#with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
interest.model <- randomForest(x = feature_parameters[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 2)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
comprehension.model <- randomForest(formula = comprehension ~ . - complexity - interest - familiarity - text.ID - person.ID, data = text_features[train_ids,], importance = TRUE,
ntree = 3000, mtry = 2)
comprehension.response <- predict(comprehension.model, text_features[test_ids,])
comprehension.correct <- (abs(comprehension.response - text_features[test_ids,]$comprehension) <= 1.0)
print(mean(comprehension.correct))
plot(comprehension.model)
varImpPlot(comprehension.model)
interest.model <- randomForest(x = feature_parameters[train_ids,], y = factor(text_features[train_ids,]$interest), importance = TRUE,
ntree = 3000, mtry = 20)
interest.response <- predict(interest.model, text_features[test_ids,])
interest.correct <- (interest.response == text_features[test_ids,]$interest)
#interest.correct <- (abs(interest.response - text_features[test_ids,]$interest) <= 1.0)
print(mean(interest.correct))
plot(interest.model)
varImpPlot(interest.model)
